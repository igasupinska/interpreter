

module AbsGramm where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data Program = Program [TopDef]
  deriving (Eq, Ord, Show, Read)

data TopDef
    = GlobalVar SType Item
    | GlobalArr ArrType ArrDeclItem
    | FnDef Type Ident [ArgOrRef] Block
  deriving (Eq, Ord, Show, Read)

data ArgOrRef = Arg Type Ident | RefArg Type Ident
  deriving (Eq, Ord, Show, Read)

data Block = Block [Stmt]
  deriving (Eq, Ord, Show, Read)

data Stmt
    = BStmt Block
    | VarDecl SType Item
    | ArrDecl ArrType ArrDeclItem
    | Ass Ident Expr
    | ArrAss ArrItem Expr
    | Ret Expr
    | VRet
    | Cond Expr Block
    | CondElse Expr Block Block
    | While Expr Block
    | For Ident Expr Expr Block
    | Print Expr
    | SExp Expr
    | Break
    | Cont
  deriving (Eq, Ord, Show, Read)

data Item = NoInit Ident | Init Ident Expr
  deriving (Eq, Ord, Show, Read)

data ArrDeclItem = ArrNoInit Ident Expr | ArrInit Ident Expr [Expr]
  deriving (Eq, Ord, Show, Read)

data Type = SType SType | ArrType ArrType | VType VType
  deriving (Eq, Ord, Show, Read)

data SType = Int | Str | Bool
  deriving (Eq, Ord, Show, Read)

data VType = Void
  deriving (Eq, Ord, Show, Read)

data ArrType = Arr SType
  deriving (Eq, Ord, Show, Read)

data Expr
    = EVar Ident
    | ELitInt Integer
    | ELitTrue
    | ELitFalse
    | EApp Ident [ExprOrRef]
    | EString String
    | ArrAcc ArrItem
    | Neg Expr
    | Not Expr
    | EMul Expr MulOp Expr
    | EAdd Expr AddOp Expr
    | ERel Expr RelOp Expr
    | EAnd Expr Expr
    | EOr Expr Expr
  deriving (Eq, Ord, Show, Read)

data ArrItem = ArrItem Ident Expr
  deriving (Eq, Ord, Show, Read)

data ExprOrRef = ERefArg Ident | EExpArg Expr
  deriving (Eq, Ord, Show, Read)

data AddOp = Plus | Minus
  deriving (Eq, Ord, Show, Read)

data MulOp = Times | Div | Mod
  deriving (Eq, Ord, Show, Read)

data RelOp = LTH | LE | GTH | GE | EQU | NE
  deriving (Eq, Ord, Show, Read)

