-- programs ------------------------------------------------

entrypoints Program ;

Program.   Program ::= [TopDef] ;

FnDef.     TopDef ::= Type Ident "(" [ArgOrRef] ")" Block ;

separator nonempty TopDef "" ;

Arg.       ArgOrRef ::= Type Ident ;

RefArg.    ArgOrRef ::= "ref" Type Ident ;

separator  ArgOrRef "," ;

-- statements ----------------------------------------------

separator  Stmt ";" ;

Block.     Block ::= "{" [Stmt] "}" ;

BStmt.     Stmt ::= Block ;

Decl.      Stmt ::= Type Item ;

NoInit.    Item ::= Ident ; 

Init.      Item ::= Ident "=" Expr ;

ArrNoInit. Item ::= Ident "(" Expr ")" ;

ArrInit.   Item ::= Ident "(" Expr ")" "{" [Expr] "}" ;

separator nonempty Item "," ;

Ass.       Stmt ::= Ident "=" Expr ;

Ret.       Stmt ::= "return" Expr ;

VRet.      Stmt ::= "return" ;

Cond.      Stmt ::= "if" "(" Expr ")" Block;

CondElse.  Stmt ::= "if" "(" Expr ")" Block "else" Block  ;

While.     Stmt ::= "while" "(" Expr ")" Block ;

For.       Stmt ::= "for" "(" Ident "from" Expr "to" Expr ")" Block ;

Print.     Stmt ::= "print" Expr ;

SExp.      Stmt ::= Expr ;

Break.     Stmt ::= "break" ;

Cont.      Stmt ::= "continue" ;

-- Types ---------------------------------------------------

Int.       Type ::= "int" ;

Str.       Type ::= "string" ;

Bool.      Type ::= "bool" ;

Void.      Type ::= "void" ;

Arr.       Type ::= "array" "<" Type ">" ;

separator  Type "," ;

-- Expressions ---------------------------------------------

EVar.      Expr6 ::= Ident ;

ELitInt.   Expr6 ::= Integer ;

ELitTrue.  Expr6 ::= "true" ;

ELitFalse. Expr6 ::= "false" ;

EApp.      Expr6 ::= Ident "(" [ExprOrRef] ")" ;

EString.   Expr6 ::= String ;

ArrAcc.    Expr5 ::= Ident "[" Expr6 "]" ;

Neg.       Expr5 ::= "-" Expr6 ;

Not.       Expr5 ::= "!" Expr6 ;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;

ERel.      Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;

EOr.       Expr ::= Expr1 "||" Expr ;

coercions  Expr 6 ;

separator  Expr "," ;

ERefArg.   ExprOrRef ::= "ref" Ident ;

EExpArg.   ExprOrRef ::= Expr ;

separator  ExprOrRef "," ;

-- operators -----------------------------------------------

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment    "#" ;

comment    "//" ;

comment    "/*" "*/" ;
